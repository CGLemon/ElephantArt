cmake_minimum_required(VERSION 3.9)
project(ElephantArt)

if (USE_AVX) 
    set(CMAKE_CXX_FLAGS "-mavx -mfma ${CMAKE_CXX_FLAGS}")
endif()

if(USE_FAST_PARSER)
    message(STATUS "Using fast parser.")
    add_definitions(-DUSE_FAST_PARSER)
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/fast_float/include/fast_float)
endif()

if(GPU_BACKEND STREQUAL "CUDA")
    message(STATUS "Using CUDA backend.")
    add_definitions(-DUSE_CUDA)
    enable_language(CUDA)
    aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src/cuda CUDA_SRCS)
    set(CMAKE_CUDA_FLAGS "" CACHE STRING "")
    if(CMAKE_CUDA_FLAGS)
        list(REMOVE_ITEM CMAKE_CUDA_FLAGS "-cudart static")
    endif()
    string(APPEND CMAKE_CUDA_FLAGS "-cudart shared")

    set(CUDA_STANDARD 14)
    set(CMAKE_CUDA_FLAGS
        "-gencode arch=compute_53,code=sm_53 -gencode arch=compute_70,code=sm_70 -gencode  arch=compute_75,code=compute_75"
    )
    set(CMAKE_CUDA_FLAGS "-Xptxas -O3 -Xcompiler -fPIC ${CMAKE_CUDA_FLAGS}")
else()
    message(STATUS "Using CPU backend.")
    message(" The GPU backend is much faster than CPU backend.")
    message(" If you want to use GPU to speed up, adding flag -DGPU_BACKEND=CUDA.")
    message(" CUDA library and Nvida GPU are both required.\n")
    if (USE_CUDNN)
        message(STATUS " Warning : ")
        message(" You use cuDNN without CUDA, Please add flag -DGPU_BACKEND=CUDA.\n")
    endif()
endif()

set(IncludePath "${CMAKE_CURRENT_SOURCE_DIR}/src")
set(CMAKE_CXX_FLAGS "-Wall -Wextra -g -ffast-math -O3 -march=native -flto ${CMAKE_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "-flto -g")

find_package(Threads REQUIRED)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED on)

if (BLAS_BACKEND STREQUAL "EIGEN")
    include_directories(${CMAKE_CURRENT_SOURCE_DIR}/third_party/Eigen)
    add_definitions(-DUSE_EIGEN)
    add_definitions(-DUSE_BLAS)
    if(NOT GPU_BACKEND STREQUAL "CUDA")
        message(STATUS "Use Eigen backend")
        if (NOT USE_AVX) 
            message(" The avx instructions can speed up the Eigen library.")
            message(" If you want to use avx instructions, adding flag -DUSE_AVX=1.")
            message(" The chip need to support avx instructions \n")
        endif()
    endif()

elseif(BLAS_BACKEND STREQUAL "OPENBLAS") 
    if(NOT GPU_BACKEND STREQUAL "CUDA")
        message(STATUS "Use OpenBlas backend")
        message(" Looking for system BLAS/OpenBLAS library.")
    endif()
    find_package(BLAS REQUIRED)
    find_path(
        BLAS_INCLUDE_DIRS openblas_config.h
        /usr/include
        /usr/local/include
        /usr/include/openblas
        /opt/OpenBLAS/include
        /usr/include/x86_64-linux-gnu
        $ENV{BLAS_HOME}/include)
    add_definitions(-DUSE_OPENBLAS)
    add_definitions(-DUSE_BLAS)
    if((UNIX AND NOT APPLE) OR WIN32)
        include_directories(${BLAS_INCLUDE_DIRS})
    endif()
    if(APPLE)
        include_directories("/System/Library/Frameworks/Accelerate.framework/Versions/Current/Headers")
    endif()
    message(" Finding BLAS/OpenBLAS library.\n")
else()
    if(NOT GPU_BACKEND STREQUAL "CUDA")
        message(STATUS "Using built-in matrix backend.")
        message(" Built-in matrix is slow. Open Blas and Eigen are the better choice.")
        message(" If you want to use Eigen, adding flag -DBLAS_BACKEND=EIGEN.")
        message(" And you need to put the Eigen library to third_party directory")
        message(" If you want to use OpenBlas, adding flag -DBLAS_BACKEND=OPENBLAS.")
        message(" OpenBlas library is required.\n")
    endif()
endif()

include_directories(${IncludePath})
aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src DIR_SRCS)
add_executable(Elephant ${DIR_SRCS} ${CUDA_SRCS})

target_link_libraries(Elephant Threads::Threads)
target_link_libraries(Elephant ${BLAS_LIBRARIES})
if(GPU_BACKEND STREQUAL "CUDA")
    target_compile_definitions(Elephant PRIVATE USE_CUDA_BACKEND)
    find_package(CUDA REQUIRED)
    if (USE_CUDNN)
        message(STATUS "Using cuDNN.")
        message(" Looking for cuDNN library...")
        find_path(CUDNN_INCLUDE_DIR cudnn.h HINTS ${CUDNN_ROOT_DIR} ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES cuda/include include)
        if((NOT CUDNN_INCLUDE_DIR))
            message(ERROR "${ColorBoldRed} cudnn.h was NOT found, specify CUDNN_INCLUDE_DIR to indicate where it is.")
        endif()
        add_definitions(-DUSE_CUDNN)
        find_library(CUDNN_LIBRARY libcudnn.so PATHS /usr/local/cuda/lib64 /opt/cuda/lib64)
        include_directories(SYSTEM ${CUDNN_INCLUDE_DIR})
        message(" Finding cuDNN library.\n")
    else()
        message(" The cuDNN can speed up the neural network, but you don't use it now.")
        message(" If you want to use cuDNN, adding flag -DUSE_CUDNN=1.")
        message(" The cuDNN library and Nvida GPU are both required.\n")
    endif()

    include_directories(SYSTEM ${CUDA_INCLUDE_DIRS})
    target_link_libraries(Elephant ${CUDNN_LIBRARY} ${CUDA_CUBLAS_LIBRARIES} ${CUDA_LIBRARIES})
endif()

# if(USE_ZLIB)
#    find_package(ZLIB REQUIRED)
#    include_directories(${ZLIB_INCLUDE_DIRS})
#    target_link_libraries(Elephant ${ZLIB_LIBRARIES})
#    add_definitions(-DUSE_ZLIB)
#    message(STATUS "Using zlib.")
#    message(" The program can read gzip file")
# else()
#    message(STATUS "whihout using zlib.")
#    message(" Because of whiout using zlib.")
#    message(" The program can't read the gzip files.")
#    message(" If you want to use zlib, adding flag -DUSE_ZLIB=1.\n")
# endif()
